/* 
 * {{>frag/generatedBy}}
 */

package {{apiPackage}}

import {{{securityPackage}}}.requestData
import io.ktor.client.call.body
/** TODO: Only import the request types that are used by this API. */
import io.ktor.client.request.*
import io.ktor.http.ContentType
import io.ktor.http.contentType
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext

open class {{name}}Api(
    val configuration: {{{supportPackage}}}.Configuration
) {
    private val client: io.ktor.client.HttpClient = configuration.client

    {{!-- var configuration: Configuration
    var cachePolicy: URLRequest.CachePolicy
    var timeoutInterval: TimeInterval

    public init(configuration: Configuration) {
        self.configuration = configuration
        if let basePath = configuration.basePath {
            self.basePath = basePath
        } else {
{{#each @root.servers}}
{{#if @first}}
            self.basePath = {{{stringLiteral url}}}.replacingOccurrences(of: "/", with: "", options: [.anchored, .backwards], range: nil)
{{/if}}
{{/each}}
{{#unless @root.servers}}
            self.basePath = ""
{{/unless}}
        }
        if let cachePolicy = configuration.cachePolicy {
            self.cachePolicy = cachePolicy
        } else {
            self.cachePolicy = URLRequest.CachePolicy.reloadIgnoringLocalAndRemoteCacheData
        }
        self.timeoutInterval = configuration.timeoutInterval
    }
--}}
{{#each operations}}
    {{>frag/operation group=..}}
{{/each}}
}
