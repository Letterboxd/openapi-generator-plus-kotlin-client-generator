/*
 * {{>frag/generatedBy}}
 */

package {{securityPackage}}

import io.ktor.client.HttpClient
import io.ktor.client.engine.okhttp.OkHttp
import io.ktor.client.plugins.contentnegotiation.ContentNegotiation
import io.ktor.client.request.HttpRequestBuilder
import io.ktor.serialization.kotlinx.json.json
import kotlinx.serialization.json.Json
import java.net.URL
import kotlin.time.Duration

abstract class AbstractOAuthFlowClient(
    val clientId: String,
    val clientSecret: String,
    refreshURL: URL?,
    autoRefreshInterval: Duration? = null,
    accessTokenDidChange: AccessTokenHandler?
) : SecurityClient {

    protected val tokenManager: OAuthAccessTokenManager
    protected val client = HttpClient(OkHttp) {
        install(ContentNegotiation) {
            json(Json {
                encodeDefaults = false
            })
        }
    }

    val refreshToken: String?
        get() = tokenManager.accessToken?.refreshToken

    val accessToken: OAuthAccessToken?
        get() = tokenManager.accessToken

    var revocationURL: URL? = null

    init {
        tokenManager = OAuthAccessTokenManager(
            clientId, clientSecret, refreshURL, autoRefreshInterval, accessTokenDidChange
        )
    }

    /** Authenticate the security client using a refresh token. */
    suspend fun authenticate(refreshToken: String): Result<Unit> {
        tokenManager.setAccessToken(OAuthAccessToken(refreshToken = refreshToken))
        return tokenManager.refreshToken()
    }

    override suspend fun reauthenticate(
        requestData: RequestData, securityScheme: SecurityScheme, scopes: List<String>?
    ) = tokenManager.refreshToken(requestData)

    override suspend fun authorize(
        requestBuilder: HttpRequestBuilder, securityScheme: SecurityScheme, scopes: List<String>?
    ) = tokenManager.authorize(requestBuilder)

    suspend fun revokeRefreshToken() {
        val revocationURL = revocationURL ?: return
        tokenManager.revokeRefreshToken(revocationURL)
    }

    suspend fun revokeAccessToken() {
        val revocationURL = revocationURL ?: return
        tokenManager.revokeAccessToken(revocationURL)
    }
}