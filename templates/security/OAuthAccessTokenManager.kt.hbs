/*
 * {{>frag/generatedBy}}
 */

package {{securityPackage}}

import {{{supportPackage}}}.APIException
import io.ktor.client.HttpClient
import io.ktor.client.call.body
import io.ktor.client.request.HttpRequestBuilder
import io.ktor.client.request.forms.submitForm
import io.ktor.client.request.header
import io.ktor.http.HttpStatusCode
import io.ktor.http.parameters
import kotlinx.coroutines.CoroutineExceptionHandler
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.Job
import kotlinx.coroutines.NonCancellable
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.sync.Mutex
import kotlinx.coroutines.sync.withLock
import kotlinx.coroutines.withContext
import kotlinx.datetime.Clock
import java.net.URL
import kotlin.time.Duration

typealias AccessTokenHandler = (OAuthAccessToken?) -> Unit

/** An OAuth access token manager that manages using and refreshing the access token, including handling concurrent requests and refreshes. */
class OAuthAccessTokenManager(
    private val clientId: String,
    private val clientSecret: String,
    private val refreshTokenURL: URL?,
    private val preemptiveAccessTokenRefresh: Duration? = null,
    private val accessTokenDidChange: AccessTokenHandler? = null,
    private val authClient: HttpClient
) {

    private val mutex = Mutex()
    private val handler = CoroutineExceptionHandler { _, exception ->
        println("OAuthAccessTokenManager: An error occurred: $exception")
    }
    private val scope = CoroutineScope(Dispatchers.IO + handler)

    private var waitingForRefresh: Job? = null
    internal var accessToken: OAuthAccessToken? = null
        private set(newToken) {
            field = newToken
            accessTokenDidChange?.invoke(newToken)
        }

    suspend fun setAccessToken(token: OAuthAccessToken) {
        mutex.withLock {
            accessToken = token
        }
    }

    suspend fun refreshToken(): Result<Unit> {
        // make refresh token request and update the token.
        val refreshTokenURL = refreshTokenURL ?: run {
            return Result.failure(APIException.NotAuthenticated)
        }

        val previousToken = accessToken?.accessToken

        return mutex.withLock {
            withContext(NonCancellable) {

                val accessToken =
                    accessToken ?: return@withContext Result.failure(APIException.NotAuthenticated)
                val refreshToken = accessToken.refreshToken ?: return@withContext Result.failure(
                    APIException.NotAuthenticated
                )

                if (accessToken.accessToken != previousToken) {
                    // Access token possibly updated, let's make a positive prediction and return success.
                    return@withContext Result.success(Unit)
                }

                val preEmptiveRequestInstant = Clock.System.now()

                val response = runCatching {
                    authClient.submitForm(
                        url = refreshTokenURL.toString(),
                        formParameters = parameters {
                            append("grant_type", "refresh_token")
                            append("refresh_token", refreshToken)
                            append("client_id", clientId)
                            append("client_secret", clientSecret)
                        }
                    )
                }.getOrElse {
                    return@withContext Result.failure(it)
                }

                return@withContext when (response.status) {
                    HttpStatusCode.OK -> {
                        val newAccessToken = response.body<OAuthAccessToken>().apply {
                            createdAt = preEmptiveRequestInstant
                        }
                        this@OAuthAccessTokenManager.accessToken = newAccessToken
                        newAccessToken.expiresIn
                            ?.let { Duration.parse("${it}s") }
                            ?.also { startRefreshTimer(it) }
                        Result.success(Unit)
                    }

                    // Response code is 429 meaning the token might still be valid but the rate limit has been exceeded.
                    HttpStatusCode.TooManyRequests -> {
                        Result.failure(APIException.UnexpectedResponse(response))
                    }

                    // Response code is in 400 - s range.
                    in HttpStatusCode.BadRequest .. HttpStatusCode.InternalServerError -> {
                        this@OAuthAccessTokenManager.accessToken = null
                        Result.failure(APIException.AuthenticationFailed(response))
                    }

                    else -> Result.failure(APIException.UnexpectedResponse(response))
                }
            }
        }
    }

    private fun authorizationHeader(token: String): String {
        return "Bearer $token"
    }

    private suspend fun startRefreshTimer(expiresIn: Duration) {
        waitingForRefresh?.cancel()
        waitingForRefresh = null

        val preemptiveAccessTokenRefresh = preemptiveAccessTokenRefresh ?: return
        val tokenIsPreEmptivelyExpired = (expiresIn - preemptiveAccessTokenRefresh).isNegative()
        if (!tokenIsPreEmptivelyExpired) return

        waitingForRefresh = scope.launch {
            delay(expiresIn - preemptiveAccessTokenRefresh)

            refreshToken()
                .onFailure { error ->
                    println("An error occurred in the automatic OAuth access token refresh: $error")
                    return@launch
                }
        }
    }

    suspend fun refreshToken(requestData: RequestData) = runCatching {
        val token = accessToken?.accessToken ?: run {
            return refreshToken()
        }

        requestData.headers["Authorization"]?.let { failedAuthorizationHeader ->
            if (failedAuthorizationHeader == authorizationHeader(token)) {
                return refreshToken()
            }
        }

        mutex.withLock {
            // wait until any operations using the mutex has finished.
        }

        // Try again with the current access token (it's not the one that the failed request used)
        return@runCatching
    }

    suspend fun authorize(request: HttpRequestBuilder) = runCatching {
        if (accessToken?.isExpired == true) refreshToken()

        val token = accessToken?.accessToken ?: throw APIException.NotAuthenticated
        request.header("Authorization", authorizationHeader(token))
    }

    /** Revokes the refresh token using the given [url] */
    suspend fun revokeRefreshToken(url: URL) = runCatching {
        val refreshToken = accessToken?.refreshToken ?: return@runCatching

        val response = authClient.submitForm(
            url = url.toString(),
            formParameters = parameters {
                append("token_type_hint", "refresh_token")
                append("token", refreshToken)
                append("client_id", clientId)
                append("client_secret", clientSecret)
            }
        )

        when (response.status) {
            HttpStatusCode.OK -> {
                accessToken = accessToken?.copy(refreshToken = null)
            }

            else -> throw APIException.AuthenticationFailed(response)
        }
    }

    /** Revokes the refresh token using the given [url] */
    suspend fun revokeAccessToken(url: URL) = runCatching {
        val accessToken = accessToken?.accessToken ?: return@runCatching

        val response = authClient.submitForm(
            url = url.toString(),
            formParameters = parameters {
                append("token_type_hint", "access_token")
                append("token", accessToken)
                append("client_id", clientId)
                append("client_secret", clientSecret)
            }
        )

        when (response.status) {
            HttpStatusCode.OK -> {
                this@OAuthAccessTokenManager.accessToken = null
            }

            else -> throw APIException.AuthenticationFailed(response)
        }
    }

}