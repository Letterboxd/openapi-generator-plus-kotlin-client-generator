/*
 * {{>frag/generatedBy}}
 */

package {{securityPackage}}

import {{{supportPackage}}}.APIException
import io.ktor.client.call.body
import io.ktor.client.request.forms.submitForm
import io.ktor.http.HttpStatusCode
import io.ktor.http.parameters
import kotlinx.coroutines.sync.Mutex
import kotlinx.coroutines.sync.withLock
import kotlinx.datetime.Clock
import java.net.URL
import kotlin.time.Duration

/** A client for the OAuth 2.0 Client Credentials Flow */
class OAuthClientCredentialsFlowClient(
    clientId: String,
    clientSecret: String,
    refreshURL: URL? = null,
    val tokenURL: URL,
    autoRefreshInterval: Duration? = null,
    accessTokenDidChange: AccessTokenHandler? = null
) : AbstractOAuthFlowClient(
    clientId, clientSecret, refreshURL, autoRefreshInterval, accessTokenDidChange
) {
    private val mutex = Mutex()

    /** Authenticate the security client, requesting the given [scopes] with an optional, additional [params] */
    suspend fun authenticate(
        scopes: List<String>?, params: Map<String, String>? = null
    ): Result<Unit> {
        val preEmptiveRequestInstant = Clock.System.now()

        val response = client.submitForm(url = tokenURL.toString(), formParameters = parameters {
            append("grant_type", "client_credentials")
            append("client_id", clientId)
            append("client_secret", clientSecret)

            scopes?.let {
                if (it.isNotEmpty()) append("scope", it.joinToString(separator = " "))
            }

            params?.entries?.forEach { (key, value) ->
                append(key, value)
            }
        })

        return when (response.status) {
            HttpStatusCode.OK -> {
                val token = response.body<OAuthAccessToken>().apply {
                    createdAt = preEmptiveRequestInstant
                }
                tokenManager.setAccessToken(token)
                Result.success(Unit)
            }

            else -> Result.failure(APIException.AuthenticationFailed(response))
        }
    }

    override suspend fun reauthenticate(
        requestData: RequestData, securityScheme: SecurityScheme, scopes: List<String>?
    ): Result<Unit> {
        return super.reauthenticate(requestData, securityScheme, scopes)
            .fold(
                onSuccess = { Result.success(Unit) },
                onFailure = {
                    val currentToken = tokenManager.accessToken

                    mutex.withLock {
                        if (currentToken != tokenManager.accessToken) {
                            return@withLock Result.success(Unit)
                        }

                        authenticate(scopes)
                    }
                }
            )
    }

    companion object
}
