/*
 * {{>frag/generatedBy}}
 */

package {{securityPackage}}

import io.ktor.client.request.HttpRequestBuilder
import io.ktor.client.request.header
import io.ktor.util.encodeBase64

/** A [SecurityClient] responsible for handling Basic authentication credentials. */
class BasicAuthenticationSecurityClient(
    private val username: String, private val password: String
) : SecurityClient {

    /** **This function does not do anything**, as username and password do not expire. */
    override suspend fun reauthenticate(
        requestData: RequestData, securityScheme: SecurityScheme, scopes: List<String>?
    ) = Result.success(Unit)

    override suspend fun authorize(
        requestBuilder: HttpRequestBuilder, securityScheme: SecurityScheme, scopes: List<String>?
    ) = runCatching {
        requestBuilder.header("Authorization", "$username:$password".encodeBase64())
    }
}
