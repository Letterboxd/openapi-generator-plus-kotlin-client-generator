/*
 * {{>frag/generatedBy}}
 */

package {{securityPackage}}

import {{{supportPackage}}}.APIException
import io.ktor.client.call.body
import io.ktor.client.request.forms.submitForm
import io.ktor.http.HttpStatusCode
import io.ktor.http.parameters
import kotlinx.datetime.Clock

/** A client for the OAuth 2.0 Password Flow */
class OAuthPasswordFlowClient(
    clientId: String,
    clientSecret: String,
    refreshURL: java.net.URL? = null,
    private val tokenURL: java.net.URL,
    autoRefreshInterval: kotlin.time.Duration? = null,
    accessTokenDidChange: AccessTokenHandler? = null
) : AbstractOAuthFlowClient(
    clientId, clientSecret, refreshURL, autoRefreshInterval, accessTokenDidChange
) {

    /** Authenticate the security client using [username] and [password] credentials, requesting the given [scopes] with an optional, additional [params]. */
    suspend fun authenticate(
        username: String,
        password: String,
        scopes: List<String>?,
        params: Map<String, String>? = null
    ): Result<Unit> {
        val preEmptiveRequestInstant = Clock.System.now()

        val response = client.submitForm(
            url = tokenURL.toString(),
            formParameters = parameters {
                append("grant_type", "password")
                append("username", username)
                append("password", password)
                append("client_id", clientId)
                append("client_secret", clientSecret)

                scopes?.let {
                    append("scope", it.joinToString(separator = " "))
                }

                params?.entries?.forEach { (key, value) ->
                    append(key, value)
                }
            }
        )

        return when (response.status) {
            HttpStatusCode.OK -> {
                val token: OAuthAccessToken = response.body()
                token.createdAt = preEmptiveRequestInstant
                tokenManager.setAccessToken(token)
                Result.success(Unit)
            }

            else -> Result.failure(APIException.AuthenticationFailed(response))
        }
    }

    companion object
}
