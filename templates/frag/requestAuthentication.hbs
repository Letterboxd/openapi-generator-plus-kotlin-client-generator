// Set request authentication
var didAuthenticate = false
var lastException: Throwable? = null
{{#each securityRequirements.requirements}}

// Authentication with {{#each schemes}}{{scheme.name}}{{#unless @last}}, {{/unless}}{{/each}}
if (!didAuthenticate) {
    val requestBuilderToBeAuthed = 
        io.ktor.client.request.HttpRequestBuilder().takeFrom(this)

    run {
        configuration.securityClient?.let { securityClient ->
        {{#each schemes}}
{{#join '_scopes' ''}}
{{#if scopes}}
listOf(
{{#each scopes}}
{{{stringLiteral name}}}{{#unless @last}}, {{/unless}}
{{/each}}
)
{{else}}
null
{{/if}}
{{/join}}
            // {{{scheme.name}}}
            securityClient.authorize(
                requestBuilderToBeAuthed, 
                {{{../../_securityScheme}}}.{{{upperCase scheme.name}}}, 
                {{{_scopes}}}
            ).onFailure { firstAttemptException ->
                if (firstAttemptException is {{{../../_apiException}}}.NotAuthenticated) {
                    securityClient.reauthenticate(
                        requestBuilderToBeAuthed.requestData(),
                        {{{../../_securityScheme}}}.{{{upperCase scheme.name}}},
                        {{{_scopes}}}
                    ).onFailure { secondAttemptException ->
                        lastException = secondAttemptException
                        return@run
                    }
                    securityClient.authorize(
                        requestBuilderToBeAuthed, 
                        {{{../../_securityScheme}}}.{{{upperCase scheme.name}}}, 
                        {{{_scopes}}}
                    ).onFailure { secondAttemptException ->
                        lastException = secondAttemptException
                        return@run
                    }
                } else {
                    lastException = firstAttemptException
                    return@run
                }
            }
{{#unless @last}}

{{/unless}}
            {{/each}}
        }

        didAuthenticate = true
        takeFrom(requestBuilderToBeAuthed)
    }
}
{{/each}}

{{#unless securityRequirements.optional}}
if (!didAuthenticate) {
    lastException?.let { return@withContext Result.failure(it) }
}
{{/unless}}
