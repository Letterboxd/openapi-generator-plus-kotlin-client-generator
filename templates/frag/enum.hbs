{{>frag/schemaDocumentation}}
@kotlinx.serialization.Serializable(with = {{{name}}}.Serializer::class)
sealed interface {{{name}}} {
    val value: kotlin.String

    data class Unknown(override val value: kotlin.String) : {{{name}}} {
        override fun toString(): String = value
    }

{{#each enumValues}}
    data object {{className name}} : {{{../name}}} {
        override val value: kotlin.String = "{{{value}}}"
        override fun toString(): String = value
    }
    
{{/each}}
    object Serializer : kotlinx.serialization.KSerializer<{{{name}}}> {
        override val descriptor: kotlinx.serialization.descriptors.SerialDescriptor =
            kotlinx.serialization.descriptors.PrimitiveSerialDescriptor(
                "{{{nativeType.concreteType}}}Serializer",
                kotlinx.serialization.descriptors.PrimitiveKind.STRING
            )

        override fun serialize(
            encoder: kotlinx.serialization.encoding.Encoder, 
            value: {{{name}}}
        ) {
            encoder.encodeString(value.value)
        }

        override fun deserialize(decoder: kotlinx.serialization.encoding.Decoder): {{{name}}} =
            when (val value = decoder.decodeString()) {
                {{#each enumValues}}
                "{{{value}}}" -> {{{../name}}}.{{className name}}
                {{/each}}
                else -> {{{name}}}.Unknown(value)
            }
    }

}
