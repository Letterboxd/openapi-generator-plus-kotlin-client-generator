{{>frag/schemaDocumentation}}
@kotlinx.serialization.Serializable(with = {{{name}}}.Serializer::class)
sealed class {{{name}}}{{#if @root.isAndroidBundleCompatible}} : java.io.Serializable{{/if}} {
    
    companion object {

        /** Returns all enum cases in an immutable list, excluding the unknown case. */
        val entries = listOf(
{{#join '_entries' ',
'}}
{{#each enumValues}}
            {{{../name}}}.{{className name}}
{{/each}}
{{/join}}
{{{_entries}}}
        )

        /**
         * Returns the enum constant of this type with the specified name. 
         * The string must match exactly an identifier used to declare an enum constant in this type. 
         * (Extraneous whitespace characters are not permitted.)
         * If an enum constant of this type with the specified name does not exist,
         * a default case of [Unknown] case will be returned that contains the provided value.
         */
        fun valueOf(value: kotlin.String): {{{name}}} = when (value) {
            {{#each enumValues}}
            "{{{value}}}" -> {{{../name}}}.{{className name}}
            {{/each}}
            else -> {{{name}}}.Unknown(value)
        }

    }

    /** Returns the API value of this enum constant. */
    abstract val value: kotlin.String

    /** Returns the name of this enum constant, exactly as declared in its enum declaration. */
    abstract val name: kotlin.String

{{#each enumValues}}
    data object {{{className name}}} : {{{../name}}}() {
        override val name = "{{{className name}}}"
        override val value = "{{{value}}}"
        override fun toString() = value
    }
{{/each}}

    data class Unknown(
        override val value: kotlin.String,
    ) : {{{name}}}() {
        override val name = value
        override fun toString() = value
    }

    object Serializer : kotlinx.serialization.KSerializer<{{{name}}}>{{#if @root.isAndroidBundleCompatible}}, java.io.Serializable{{/if}} {
        {{#if @root.isAndroidBundleCompatible}}
        private fun readResolve(): Any = Serializer

        {{/if}}
        override val descriptor: kotlinx.serialization.descriptors.SerialDescriptor =
            kotlinx.serialization.descriptors.PrimitiveSerialDescriptor(
                "{{{nativeType.concreteType}}}Serializer",
                kotlinx.serialization.descriptors.PrimitiveKind.STRING
            )

        override fun serialize(
            encoder: kotlinx.serialization.encoding.Encoder, 
            value: {{{name}}}
        ) {
            encoder.encodeString(value.value)
        }

        override fun deserialize(decoder: kotlinx.serialization.encoding.Decoder): {{{name}}} =
            valueOf(decoder.decodeString())
    }

}
