{{>frag/schemaDocumentation}}
@kotlinx.serialization.Serializable(with = {{{name}}}.Serializer::class)
sealed class {{{className name}}}{{#if @root.isJavaSerializable}} : java.io.Serializable{{/if}} {
{{#each composes}}
{{#join '_serializer' ''}}
kotlinx.serialization.serializer<{{{nativeType}}}>()
{{/join}}

    @kotlinx.serialization.Serializable(with = {{{className name}}}.Serializer::class)
    data class {{{className name}}}(val value: {{{nativeType}}}) : {{{../nativeType.parentType}}}() {
        object Serializer : kotlinx.serialization.KSerializer<{{{className name}}}>{{#if @root.isJavaSerializable}}, java.io.Serializable{{/if}} {
            {{#if @root.isJavaSerializable}}
            private fun readResolve(): Any = Serializer

            {{/if}}
            override val descriptor: kotlinx.serialization.descriptors.SerialDescriptor =
                {{{_serializer}}}.descriptor

            override fun deserialize(decoder: kotlinx.serialization.encoding.Decoder) =
                {{{className name}}}(value = {{{_serializer}}}.deserialize(decoder))
            
            override fun serialize(encoder: kotlinx.serialization.encoding.Encoder, value: {{{className name}}}) =
                {{{_serializer}}}.serialize(encoder, value.value)
        }
    }
{{/each}}

{{#if discriminator}}
    @kotlinx.serialization.Serializable
    data class Unknown(

        /** The unknown discriminator value passed from the API. */
        @kotlinx.serialization.SerialName("{{{discriminator.serializedName}}}")
        val {{{discriminator.name}}}: {{{discriminator.nativeType}}}
        
    ) : {{{nativeType.parentType}}}()
{{else}}
    @kotlinx.serialization.Serializable
    data object Unknown : {{{nativeType.parentType}}}()
{{/if}}

    object Serializer : kotlinx.serialization.KSerializer<{{{name}}}>{{#if @root.isJavaSerializable}}, java.io.Serializable{{/if}} {
        {{#if @root.isJavaSerializable}}
        private fun readResolve(): Any = Serializer
        
        {{/if}}
        @OptIn(
            kotlinx.serialization.InternalSerializationApi::class,
            kotlinx.serialization.ExperimentalSerializationApi::class
        )
        override val descriptor: kotlinx.serialization.descriptors.SerialDescriptor =
            kotlinx.serialization.descriptors.buildSerialDescriptor("{{{nativeType}}}Serializer", kotlinx.serialization.descriptors.PolymorphicKind.OPEN) {
                element("{{{discriminator.serializedName}}}", kotlinx.serialization.serializer<String>().descriptor)
            }

        override fun deserialize(decoder: kotlinx.serialization.encoding.Decoder): {{{name}}} {
            require(decoder is kotlinx.serialization.json.JsonDecoder)

            val jsonObject = decoder.decodeJsonElement() as? kotlinx.serialization.json.JsonObject ?: error("JsonElement is not a JsonObject")
            val type = jsonObject["{{{discriminator.serializedName}}}"]?.let { decoder.json.decodeFromJsonElement(kotlinx.serialization.serializer<{{{discriminator.nativeType.concreteType}}}>(), it) }
            requireNotNull(type) { "The discriminator for a child of `{{{name}}}` could not be found." }

            val nextTree = kotlinx.serialization.json.JsonObject(jsonObject.toMutableMap().apply {
                remove(key = "{{{discriminator.serializedName}}}")
            })

            return when (type) {
                {{#each discriminator.references}}
                {{#if schema.name}}
                {{{literalValue}}} -> decoder.json.decodeFromJsonElement({{{../name}}}.{{{schema.name}}}.serializer(), nextTree)
                {{/if}}
                {{/each}}
                else -> Unknown({{{discriminator.name}}} = type)
            }
        }

        override fun serialize(encoder: kotlinx.serialization.encoding.Encoder, value: {{{name}}}) {
            require(encoder is kotlinx.serialization.json.JsonEncoder)

            val jsonObject: kotlinx.serialization.json.JsonObject = when (value) {
                {{#each composes}}
                {{#if name}}
                is {{{../name}}}.{{{name}}} -> encoder.json.encodeToJsonElement({{{../name}}}.{{{name}}}.serializer(), value)
                {{/if}}
                {{/each}}
                is {{{name}}}.Unknown -> throw kotlinx.serialization.SerializationException("Cannot encode an unknown one-of value of `{{{name}}}`.")
            } as? kotlinx.serialization.json.JsonObject ?: error("JsonElement is not a JsonObject")

            val completeObject = kotlinx.serialization.json.JsonObject(jsonObject.toMutableMap().apply {
                val discriminator = when (value) {
                    {{#each discriminator.references}}
                    {{#if schema.name}}
                    is {{{../name}}}.{{{schema.name}}} -> "{{{value}}}"
                    {{/if}}
                    {{/each}}
                    is {{{name}}}.Unknown -> throw kotlinx.serialization.SerializationException("Cannot encode an unknown one-of value of `{{{name}}}`.")
                }

                put("{{{discriminator.serializedName}}}", kotlinx.serialization.json.JsonPrimitive(discriminator))
            })

            encoder.encodeJsonElement(completeObject)
        }
    }

    {{>frag/nestedSchemas}}
}
