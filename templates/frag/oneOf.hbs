{{>frag/schemaDocumentation}}
@kotlinx.serialization.Serializable
sealed class {{{className name}}} {
{{#each composes}}

    @kotlinx.serialization.Serializable
    data class {{{className name}}}(

        val value: {{{nativeType}}}

        @kotlinx.serialization.SerialName("{{{../discriminator.serializedName}}}")
        val {{{../discriminator.name}}}: {{{../discriminator.nativeType}}} = "hi"

    ) : {{{../nativeType.parentType}}}()
{{/each}}

{{#if discriminator}}
    @kotlinx.serialization.Serializable
    data class Unknown(

        /** The unknown discriminator value passed from the API. */
        @kotlinx.serialization.SerialName("{{{discriminator.serializedName}}}")
        val {{{discriminator.name}}}: {{{discriminator.nativeType}}}
        
    ) : {{{nativeType.parentType}}}()
{{else}}
    @kotlinx.serialization.Serializable
    data object Unknown : {{{nativeType.parentType}}}()
{{/if}}

    object Serializer : kotlinx.serialization.KSerializer<{{{className name}}}> {
        override val descriptor: kotlinx.serialization.descriptors.SerialDescriptor =
            kotlinx.serialization.descriptors.PrimitiveSerialDescriptor(
                "{{{nativeType}}}Serializer",
                kotlinx.serialization.descriptors.PrimitiveKind.STRING
            )

        override fun serialize(
            encoder: kotlinx.serialization.encoding.Encoder,
            value: {{{nativeType}}}
        ) = when (value) {
            {{#each composes}}
            {{#if name}}
            is {{{className name}}} -> encoder.encodeSerializableValue({{{nativeType}}}.serializer(), value.value)
            {{/if}}
            {{/each}}
            is Unknown -> throw CannotEncodeUnknown()
        }

{{#join '_discriminatorType' ''}}
{{{discriminator.nativeType.concreteType}}}
{{/join}}
        override fun deserialize(decoder: kotlinx.serialization.encoding.Decoder): {{{name}}} = 
            when (decoder.decodeSerializableValue({{{_discriminatorType}}}.serializer())) {
                {{#each discriminator.references}}
                {{#if schema.name}}
                {{{../_discriminatorType}}}.{{value}} -> decoder.decodeSerializableValue({{{schema.name}}}.serializer())
                {{/if}}
                {{/each}}
                is {{{discriminator.nativeType.concreteType}}}.Unknown -> decoder.decodeSerializableValue(Unknown.serializer())
            }
    }

    {{>frag/nestedSchemas}}
}
