{{#join '_params' ', '}}
{{#each parameters}}
{{{name}}}: {{{nativeType}}}{{#unless required}} = null{{/unless}}
{{/each}}
{{#if requestBody.nativeType}}
{{#with requestBody}}
{{{name}}}: {{{nativeType}}}{{#unless required}} = null{{/unless}}
{{/with}}
{{/if}}
{{/join}}
{{#join '_callParams' ', '}}
{{#each parameters}}
{{{name}}}: {{{name}}}
{{/each}}
{{#if requestBody.nativeType}}
{{#with requestBody}}
{{{name}}}: {{{name}}}
{{/with}}
{{/if}}
{{/join}}
{{#join '_requestCallParams' ', '}}
{{#each parameters}}
{{{name}}}: __request.{{{name}}}
{{/each}}
{{#if requestBody.nativeType}}
{{#with requestBody}}
{{{name}}}: {{{name}}}
{{/with}}
{{/if}}
{{/join}}
{{#join '_resultClassName' ''}}
{{className name}}Result
{{/join}}

sealed class {{{_resultClassName}}} {
{{#each responses}}
    {{!-- {{#ifneq code 401}} --}}
    {{#if description}}
    /** {{{description}}} */
    {{/if}}
    {{#if defaultContent.nativeType}}
    data class `{{{code}}}`(val value: {{{defaultContent.nativeType}}}): {{{../_resultClassName}}}()
    {{else}}
    data object `{{{code}}}`: {{{../_resultClassName}}}()
    {{/if}}
    {{!-- {{/ifneq}} --}}
{{/each}}
}

{{#if (gt (count parameters) 1)}}
{{>frag/parametersStruct}}

{{>frag/operationDocumentation}}
{{#if deprecated}}
@kotlin.Deprecated(message = "This function is deprecated.")
{{/if}}
open suspend fun {{{name}}}(__request: {{{className (concat name '_' 'request')}}}{{#if requestBody.nativeType}}, {{{requestBody.name}}}: {{{requestBody.nativeType}}}{{#unless requestBody.required}} = nil{{/unless}}{{/if}}): {{className name}}Result {
    return /* await */ {{{name}}}({{{_requestCallParams}}}{{#if requestBody.nativeType}}, {{{requestBody.name}}}: {{{requestBody.name}}}{{/if}})
}

{{/if}}
{{>frag/operationDocumentation}}
{{#if deprecated}}
@kotlin.Deprecated(message = "This function is deprecated.")
{{/if}}
open suspend fun {{{name}}}({{{_params}}}): {{className name}}Result {
    return /* await */ {{{name}}}({{{_callParams}}}{{#if _params}}, {{/if}}allowsReauth = true)
}

private suspend fun {{{name}}}({{{_params}}}{{#if _params}}, {{/if}}allowsReauth: Boolean): {{className name}}Result {
    {{!-- val __request = /* await */ {{{name}}}Request({{{_callParams}}}) --}}
    val response = client.{{{lowerCase httpMethod}}}("{{{group.path}}}{{{path}}}")

    when (response.status) {
    {{#each responses}}
        {{!-- {{#ifneq code 401}} --}}
        io.ktor.http.HttpStatusCode.fromValue({{{code}}}) -> {
        {{#if defaultContent.nativeType}}
            val body: {{{defaultContent.nativeType.concreteType}}} = response.body()
            return {{../_resultClassName}}.`{{{code}}}`(body)
            {{!-- do {
                val decodedData = JSONDecoder().decode({{{defaultContent.nativeType.concreteType}}}.self, from: data)
                return .`{{{code}}}`(decodedData)
            } catch {
                throw APIError.invalidResponse(error, response: response, data: data)
            } --}}
        {{else}}
            return {{../_resultClassName}}.`{{{code}}}`
        {{/if}}
        }
        {{!-- {{/ifneq}} --}}
    {{/each}}
    {{!-- {{#if securityRequirements}}
        HttpStatusCode.Unauthorized -> {
            if allowsReauth, val securityClient = configuration.securityClient {
                var didAuthenticate = false
                var lastError: Error?
                {{#each securityRequirements.requirements}}
                if !didAuthenticate {
                    do {
                        {{#each schemes}}
                        /* await */ securityClient.reauthenticate(failedRequest: __request, securityScheme: .{{{identifier scheme.name}}}, scopes: [{{#each scopes}}{{{stringLiteral name}}}{{#unless @last}}, {{/unless}}{{/each}}])
                        {{/each}}
                        didAuthenticate = true
                    } catch (val error) {
                        lastError = error
                    }
                }
                {{/each}}
                {{#unless securityRequirements.optional}}
                if !didAuthenticate {
                    throw lastError!
                }
                {{/unless}}
                return /* await */ {{{name}}}({{{_callParams}}}{{#if _callParams}}, {{/if}}allowsReauth = false)
            } else {
                throw APIError.authenticationFailed(response, data: data)
            }
        }
    {{/if}} --}}
        else -> throw {{group.supportPackage}}.APIError.UnexpectedResponse(response, data)
    }
}

{{!-- {{>frag/operationDocumentation}}
open suspend fun {{{name}}}Request({{{_params}}}): URLRequest {
    val localVarPath = "{{{group.path}}}{{{path}}}"
    {{#each pathParams}}
        .replacingOccurrences(of: "{{safe '{'}}{{{serializedName}}}{{safe '}'}}", with: String({{identifier name}}).addingPercentEncoding(withAllowedCharacters: .urlPathAllowed)!)
    {{/each}}

    var localVarHeaderParameter = [NameValuePair]()
    localVarHeaderParameter.removeAll()

    var localVarUrlComponents = URLComponents(string: "\(self.basePath)\(localVarPath)")!
    var localVarQueryParameter = [NameValuePair]()
    localVarUrlComponents.queryItems?.let { localVarExistingQueryItems ->
        localVarQueryParameter.append(queryItems: localVarExistingQueryItems)
    }

{{#if queryParams}}
{{#each queryParams}}
    {{>frag/requestParameter dest='localVarQueryParameter' var=(identifier name) encoding=encoding}}
{{/each}}

{{/if}}
    localVarUrlComponents.queryItems = localVarQueryParameter.count > 0 ? localVarQueryParameter.toURLQueryItems() : null

    var localVarRequest = URLRequest(url: localVarUrlComponents.url!, cachePolicy: self.cachePolicy, timeoutInterval: self.timeoutInterval)
    localVarRequest.httpMethod = {{{stringLiteral httpMethod}}}

{{#each headerParams}}
    {{>frag/requestParameter dest='localVarHeaderParameter' var=(identifier name) encoding=encoding}}

{{/each}}
{{#if cookieParams}}
    var localVarCookieParams = [NameValuePair]()
{{#each cookieParams}}
    {{>frag/requestParameter dest='localVarCookieParams' var=(identifier name) encoding=encoding}}

{{/each}}
    localVarHeaderParameter.set("Cookie", localVarCookieParams.toString(separator: "; "))

{{/if}}
{{#if requestBody.nativeType}}
{{#with requestBody}}
    {{#if required}}
    {{>frag/requestBody}}
    {{else}}
    {{{name}}}?.let { {{{name}}} ->
        {{>frag/requestBody}}
    }
    {{/if}}
{{/with}}

{{/if}}
    localVarHeaderParameter.forEach { item -> localVarRequest.addValue(item.value!, forHTTPHeaderField: item.name) }

    {{>frag/requestSecurity}}

    self.configuration.finalizeRequestBlock?.let { localVarFinalizeRequestBlock ->
        localVarFinalizeRequestBlock(&localVarRequest)
    }

    return localVarRequest
} --}}
