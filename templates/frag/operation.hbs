{{#join '_params' ', '}}
{{#each parameters}}
{{{name}}}: {{{nativeType}}}{{#unless required}} = null{{/unless}}
{{/each}}
{{#if requestBody.nativeType}}
{{#with requestBody}}
requestBody: {{{nativeType}}}{{#unless required}} = null{{/unless}}
{{/with}}
{{/if}}
{{/join}}
{{#join '_callParams' ', '}}
{{#each parameters}}
{{{name}}} = {{{name}}}
{{/each}}
{{#if requestBody.nativeType}}
{{#with requestBody}}
requestBody = requestBody
{{/with}}
{{/if}}
{{/join}}
{{#join '_requestName' ''}}
{{{name}}}QueryParams
{{/join}}
{{#join '_requestCallParams' ', '}}
{{#each parameters}}
{{{name}}} = queryParams.{{{name}}}
{{/each}}
{{#if requestBody.nativeType}}
{{#with requestBody}}
requestBody = requestBody
{{/with}}
{{/if}}
{{/join}}
{{#join '_resultClassName' ''}}
{{className name}}ResponseStatus
{{/join}}
{{#join '_fullPath' ''}}
{{{group.path}}}{{{path}}}
{{/join}}
{{#join '_securityScheme' ''}}
{{{@root.securityPackage}}}.SecurityScheme
{{/join}}
{{#join '_apiException' ''}}
{{{@root.supportPackage}}}.APIException
{{/join}}
sealed class {{{_resultClassName}}} {
{{#each responses}}
    {{!-- {{#ifneq code 401}} --}}
    {{#if description}}
    /** {{{description}}} */
    {{/if}}
    {{#if defaultContent.nativeType}}
    data class `{{{code}}}`(val value: {{{defaultContent.nativeType}}}): {{{../_resultClassName}}}()
    {{else}}
    data object `{{{code}}}`: {{{../_resultClassName}}}()
    {{/if}}
    {{!-- {{/ifneq}} --}}
{{/each}}
}

{{#if (gt (count parameters) 1)}}
{{>frag/parametersStruct queryParamsClassName=(className _requestName)}}

{{>frag/operationDocumentation}}
{{#if deprecated}}
@kotlin.Deprecated(message = "This function is deprecated.")
{{/if}}
{{#if requestBody.nativeType}}
{{/if}}
open suspend fun {{{name}}}(queryParams: {{{className _requestName}}}{{#if requestBody.nativeType}}, requestBody: {{{requestBody.nativeType}}}{{#unless requestBody.required}} = nil{{/unless}}{{/if}}): Result<{{{_resultClassName}}}> {
    return {{{name}}}({{{_requestCallParams}}}{{#if _params}}, {{/if}}allowsReauth = true)
}

{{/if}}
{{>frag/operationDocumentation}}
{{#if deprecated}}
@kotlin.Deprecated(message = "This function is deprecated.")
{{/if}}
open suspend fun {{{name}}}({{{_params}}}{{#if _params}}, {{/if}}allowsReauth: kotlin.Boolean): Result<{{{_resultClassName}}}> {
    val path = "{{{stripLeadingSlash _fullPath}}}"
    {{#if pathParams}}
    {{#each pathParams}}
        .replace("{{safe '{'}}{{{serializedName}}}{{safe '}'}}", "${{identifier name}}")
    {{/each}}
    {{/if}}
    {{#join '_requestConfiguration' ''}}
    {{#if queryParams}}.{{/if}}
    {{#if requestBody.nativeType}}.{{/if}}
    {{#if securityRequirements}}.{{/if}}
    {{/join}}
    val response = client.{{{lowerCase httpMethod}}}(path){{#if _requestConfiguration}} {

        {{#if queryParams}}
        {{>frag/requestParameter}}

        {{/if}}
        {{#if requestBody.nativeType}}
        {{>frag/requestBody}}

        {{/if}}
        {{#if securityRequirements}}
        {{>frag/requestAuthentication}}

        {{/if}}
    }
    {{/if}}

    return when (response.status) {
    {{#each responses}}
        {{#ifneq code 401}}
        io.ktor.http.HttpStatusCode.fromValue({{{code}}}) -> {
        {{#if defaultContent.nativeType}}
            val body: {{{defaultContent.nativeType}}} = response.body()
            Result.success({{../_resultClassName}}.`{{{code}}}`(body))
        {{else}}
            Result.success({{../_resultClassName}}.`{{{code}}}`)
        {{/if}}
        }
        {{/ifneq}}

    {{/each}}
    {{#if securityRequirements}}
        io.ktor.http.HttpStatusCode.Unauthorized -> {
            if (!allowsReauth) return Result.failure({{{_apiException}}}.AuthenticationFailed(response))
            val securityClient = configuration.securityClient 
                ?: return Result.failure({{{_apiException}}}.AuthenticationFailed(response))

            var didAuthenticate = false
            var lastException: Throwable? = null
            {{#each securityRequirements.requirements}}

            if (!didAuthenticate) {
                run {
                    {{#each schemes}}
                    // {{{scheme.name}}}
                    securityClient.reauthenticate(
                        response.requestData(),
                        {{{../../_securityScheme}}}.{{{upperCase scheme.name}}},
                        {{#if scopes}}listOf({{#each scopes}}{{{stringLiteral name}}}{{#unless @last}}, {{/unless}}{{/each}}){{else}}null{{/if}}
                    ).onFailure {
                        lastException = it
                        return@run
                    }

                    {{/each}}
                    didAuthenticate = true
                }
            }
            {{/each}}
            {{#unless securityRequirements.optional}}

            if (!didAuthenticate) {
                return Result.failure(
                    lastException ?: {{{_apiException}}}.AuthenticationFailed(response)
                )
            }
            {{/unless}}
            
            return {{{name}}}({{{_callParams}}}{{#if _params}}, {{/if}}allowsReauth = false)
        }

    {{/if}}
        else -> Result.failure({{{_apiException}}}.UnexpectedResponse(response))

    }
}
